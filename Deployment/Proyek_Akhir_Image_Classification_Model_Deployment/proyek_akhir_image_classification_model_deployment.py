# -*- coding: utf-8 -*-
"""Proyek Akhir : Image Classification Model Deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13nUuDvGNbl_rHSPklMfUVrViES1K9zLg

# Proyek Akhir : Image Classification Model Deployment.
---
Daniel Shandy Adryan

1494037162101-932

# Preparation
"""

!pip install split_folders

"""Importing API's and Library"""

import tensorflow as tf
from tensorflow.keras.layers import Input
from tensorflow.keras.applications import ResNet152V2,ResNet50, Xception, InceptionV3
import splitfolders
import os, warnings
from tensorflow.keras.layers import Dropout, BatchNormalization, Dense, Flatten, MaxPooling2D, Conv2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

"""Defining Variables to simplify the source code"""

mp=MaxPooling2D
konv=Conv2D
bn=BatchNormalization
imgdg = ImageDataGenerator

#classes used for callbacks
class scall(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epochs, logs={}):
    if ((logs.get('val_accuracy') > 0.85) & (logs.get('accuracy')> 0.85)):
      print ('Pelatihan Dihentikan Karena Akurasi Sudah Mencapai Nilai yang Diinginkan')
      self.model.stop_training = True

"""Cloneing the datasets from github"""

! git clone https://github.com/Hrushikesh-github/animal-3

"""Printing total images in the folders"""

print('Total Images : {}'.format(
    len(os.listdir('/content/animal-3/panda')) + 
    len(os.listdir('/content/animal-3/dogs')) + 
    len(os.listdir('/content/animal-3/cats'))
    )
)

"""Splitting folders into training folders and validation folders"""

splitfolders.ratio('/content/animal-3', '/content/animal-3/data', seed=1, ratio=(0.8, 0.2))
bdir = '/content/animal-3'
train_dir = os.path.join(bdir, 'train') ## Train Dataset
val_dir = os.path.join(bdir, 'val') ## Validation Dataset

os.listdir('/content/animal-3/data/train')

os.listdir('/content/animal-3/data/val')

train_cats_dir = os.path.join(train_dir, 'cats')
train_panda_dir = os.path.join(train_dir, 'panda')
train_dogs_dir = os.path.join(train_dir, 'dogs')

val_cats_dir = os.path.join(val_dir, 'cats')
val_panda_dir = os.path.join(val_dir, 'panda')
val_dogs_dir = os.path.join(val_dir, 'dogs')

"""creating the datasets for training"""

train_datagen = imgdg(
          rescale=1./255,
          rotation_range=30,
          brightness_range = [0.1,1.0],
          horizontal_flip=True,
          vertical_flip=True,
          shear_range = 0.3,
          zoom_range = 0.3,
          fill_mode = 'nearest')

val_datagen = imgdg(rescale=1./255)

train_gen = train_datagen.flow_from_directory(
        '/content/animal-3/data/train',  # direktori data train
        target_size=(100,150),
        batch_size=120,
        shuffle=True,
        seed=1,
        class_mode='categorical',
        classes=(['panda', 'cats', 'dogs']))

validation_gen = val_datagen.flow_from_directory(
        '/content/animal-3/data/val', # direktori data val
        target_size=(100,150),
        batch_size=60,
        shuffle=False,
        class_mode='categorical',
        classes=(['panda', 'cats', 'dogs']))

"""# Modelling and Training

Modelling
"""

model = tf.keras.models.Sequential()
model.add(Xception(weights="imagenet", include_top=False, input_tensor=Input(shape=(100, 150, 3))))
model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dense(3, activation='softmax'))

"""compiling the model"""

model.compile(optimizer=tf.optimizers.Adam(learning_rate=1.0000e-04),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

"""training the model"""

history = model.fit(
    train_gen,
    epochs= 20,
    steps_per_epoch=20,
    validation_data= validation_gen,
    validation_steps= 10,
    callbacks=[scall()],
    verbose= 2)

"""# Plotting and Predicting

Plot loss
"""

plt.plot(history.history['loss'], label = 'Latih')
plt.plot(history.history['val_loss'], label = 'Test')
plt.legend()

"""Plot Accuracy"""

plt.plot(history.history['accuracy'], label = 'Latih')
plt.plot(history.history['val_accuracy'], label = 'Test')
plt.legend()

"""Predicting"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
 
upld = files.upload()
 
for fn in upld.keys():
 
  # predicting images
  dir = fn
  gbr = image.load_img(dir, target_size=(100,150))
 
  show = plt.imshow(gbr)
  x = image.img_to_array(gbr)
  x = np.expand_dims(x, axis=0)
  imgs = np.vstack([x])
 
  classes = model.predict(imgs, batch_size=120)  
  print(classes)
  if classes[0][0]==1:
    print('panda')
  elif classes[0][1]==1:
    print('cats')
  elif classes[0][2]==1:
    print('dogs')
  else:
    print('unknown creatures')

"""# Saving into TF-Lite"""

# Ignore Warning
warnings.filterwarnings('ignore')

# Convert Model.
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the model.
with open('CDP_model.tflite', 'wb') as f:
  f.write(tflite_model)